AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service on AWS Fargate, hosted in a public subnet, and accessible
  via a public load balancer.
Outputs:
  GetPerformanceWidget:
    Description: The name of the API Gateway endpoint to get the cloudwatch widget
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get-broker-dashboard?broker={broker}&queue={queue}
  JMSBridgeECSClusterRef:
    Description: The name of the JMS bridge ECS cluster
    Value:
      Ref: JMSBridgeECSCluster
Parameters:
  MetricWidgetBucket:
    Default: fhir-code-bucket-777
    Description: The bucket to store load test performance graphs.
    Type: String
  ProducerInstanceCount:
    Default: 1
    Description: The no of producer containers to deploy.
    Type: String
  Stage:
    Default: DEV
    Description: The stage into we deploy this template.
    Type: String
Resources:
  CloudWatchLogsGroup:
    Properties:
      LogGroupName: mithunm/ecs/sample-with-amq-producer-cluster
      RetentionInDays: 30
    Type: AWS::Logs::LogGroup
  ECSTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ecs-tasks.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Path: /
    Type: AWS::IAM::Role
  JMSBridgeECSCluster:
    Properties:
      ClusterName: sample-with-amq-producer
    Type: AWS::ECS::Cluster
  JMSBridgeECSService:
    Properties:
      Cluster:
        Ref: JMSBridgeECSCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount:
        Ref: ProducerInstanceCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: JMSBridgeSecurityGroup
          Subnets:
          - Fn::ImportValue:
              Fn::Sub: ${Stage}:JMS-BRIDGE:PublicSubnet1
          - Fn::ImportValue:
              Fn::Sub: ${Stage}:JMS-BRIDGE:PublicSubnet2
      ServiceName: sample-with-amq-producer-service
      TaskDefinition:
        Ref: JMSBridgeECSTaskDefinition
    Type: AWS::ECS::Service
  JMSBridgeECSTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Cpu: 4096
        Environment:
        - Name: amazonMQ.brokerURL
          Value:
            Fn::ImportValue:
              Fn::Sub: ${Stage}:JMS-BRIDGE:AmazonMQBrokerURL
        - Name: amazonMQ.userName
          Value:
            Fn::ImportValue:
              Fn::Sub: ${Stage}:JMS-BRIDGE:AmazonMQBrokerUserName
        - Name: amazonMQ.password
          Value:
            Fn::ImportValue:
              Fn::Sub: ${Stage}:JMS-BRIDGE:AmazonMQBrokerPassword
        Image:
          Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/amazon-mq-migration-from-ibm-mq/sample-with-amq-producer:latest
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: CloudWatchLogsGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: sample-with-amq-producer
        Memory: 8192
        Name: sample-with-amq-producer
      Cpu: 4096
      ExecutionRoleArn:
        Ref: ECSTaskExecutionRole
      Family: sample-with-amq-producer
      Memory: 8192
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  JMSBridgeSecurityGroup:
    Properties:
      GroupDescription: Limits security group ingress and egress traffic for the JMS
        bridge instance
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}:JMSBridgeSecurityGroup
      VpcId:
        Fn::ImportValue:
          Fn::Sub: ${Stage}:JMS-BRIDGE:VPC
    Type: AWS::EC2::SecurityGroup
  RequestForWidgetService:
    Properties:
      CodeUri: s3://fhir-code-bucket-777/1197ead8f7b24a0032208b06f8ea78bb
      Environment:
        Variables:
          METRIC_WIDGET_BUCKET:
            Ref: MetricWidgetBucket
      Events:
        BrokerDashboard:
          Properties:
            Method: get
            Path: /get-broker-dashboard
          Type: Api
      Handler: com.amazonaws.samples.LambdaHandler::handleRequest
      MemorySize: 512
      Policies:
        Statement:
        - Action:
          - cloudwatch:GetDashboard
          - cloudwatch:ListDashboards
          - cloudwatch:PutDashboard
          - cloudwatch:ListMetrics
          - cloudwatch:GetMetricWidgetImage
          Effect: Allow
          Resource:
          - '*'
        - Action:
          - s3:*
          Effect: Allow
          Resource:
            Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: MetricWidgetBucket
              - /*
      Runtime: java8
      Timeout: 300
      Tracing: Active
    Type: AWS::Serverless::Function
Transform: AWS::Serverless-2016-10-31
